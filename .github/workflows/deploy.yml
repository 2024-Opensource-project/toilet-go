name: Deploy Python and Spring Servers

# 수동 실행을 위해 workflow_dispatch 추가
on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21 (Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'  # Temurin 배포판 사용


      # 4. Give execute permission to gradlew
      - name: Give execute permission to gradlew
        run: chmod +x gradlew

      # 4. Build with Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test  # 테스트를 제외하고 빌드 실행


      # 2. Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build Python Docker image
      - name: Build Python image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/python-api:latest ./dataAPI
          docker push ${{ secrets.DOCKER_USERNAME }}/python-api:latest

      # 4. Build Spring Docker image
      - name: Build Spring image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-api:latest ./
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-api:latest

      # 5. Deploy Python container
      - name: Deploy Python server
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/python-api:latest
          docker run -d --name python-server -p 54090:54090 ${{ secrets.DOCKER_USERNAME }}/python-api:latest

      # 6. Deploy Spring container
      - name: Deploy Spring server
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/spring-api:latest
          docker run -d --name spring-server -p 54080:54080 ${{ secrets.DOCKER_USERNAME }}/spring-api:latest
